{"version":3,"sources":["Icons/pencil-2.svg","TaskItem/TaskItem.js","TaskInput/TaskInput.js","IncompleteRow/IncompleteRow.js","CompleteRow/CompleteRow.js","Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TaskItem","props","className","completed","text","dueDate","type","onClick","completeTask","id","deleteTask","TaskInput","useState","setText","setDueDate","placeholder","onChange","event","target","value","addTask","IncompleteRow","count","CompleteRow","Header","src","pencilIcon","alt","App","uuidv4","tasks","setTasks","activeTasks","filter","task","completedTasks","updatedTasks","map","newTask","length","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b439422d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pencil-2.f436b4e9.svg\";","import React from 'react';\n\nimport './TaskItem.css';\n\n\nfunction TaskItem(props) {\n\n    function handleDeleteClick() {\n        props.deleteTask(props.id);\n    }\n\n    function handleCompleteClick() {\n        props.completeTask(props.id);\n    }\n\n    return (\n        <div className={`container ${props.completed ? \"task-item__completed\" : \"task-item\"}`}>\n            <div className=\"row\">\n                <div className=\"col-12 col-md-8 task-item__all\">\n                    <p className=\"task-item__text\">\n                        {props.text}\n                    </p>\n                </div>\n                <div className=\"col-12 col-md-2 task-item__date-all\">\n                    <p className=\"task-item__date\">\n                        Due: {props.dueDate}\n                    </p>\n                </div>\n                <div className=\"col-6 col-md-1 task-item__button\">\n                    {!props.completed &&\n                        <button\n                            type=\"button\"\n                            className=\"btn btn-success task-item__done-button\"\n                            onClick={handleCompleteClick}>\n                            <span className=\"material-icons\">done</span>\n                        </button>}\n                </div>\n                <div className=\"col-6 col-md-1 task-item__button\">\n                    <button\n                        type=\"button\"\n                        className=\"btn btn-danger task-item__delete-button\"\n                        onClick={handleDeleteClick}>\n                        <span className=\"material-icons\">delete</span>\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default TaskItem;\n","import React, { useState } from 'react';\n\nimport './TaskInput.css';\n\n\nfunction TaskInput(props) {\n\n    const [text, setText] = useState(\"\");\n\n    //Look into adding momentjs to date below.\n    const [dueDate, setDueDate] = useState(\"\")\n\n    function handleTextChange(event) {\n        setText(event.target.value);\n    }\n\n    function handleDateChange(event) {\n        setDueDate(event.target.value)\n    }\n\n    function handleAddTaskClick() {\n        props.addTask(text, dueDate);\n    }\n    return (\n        <div className=\"container task-input\">\n            <div className=\"row\">\n                <div className=\"col-12 col-md-5 task-input__text-box\">\n                    <input\n                        className=\"form-control\"\n                        type=\"text\"\n                        placeholder=\"What do you need to do?\"\n                        onChange={handleTextChange}\n                        value={text} />\n                </div>\n                <div className=\"col-12 col-md-5 task-input__date-box\">\n                    <input\n                        type=\"date\"\n                        className=\"form-control add-task__input-field add-task--date\"\n                        onChange={handleDateChange}\n                        value={dueDate} />\n                </div>\n                <div className=\"col-12 col-md-2 task-input__button\">\n                    <button\n                        type=\"button\"\n                        className=\"btn btn-success task-input__add-button\"\n                        onClick={handleAddTaskClick}\n                    >Add</button>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default TaskInput;","import React from 'react';\n\nimport './IncompleteRow.css';\n\n\n\n\nfunction IncompleteRow(props) {\n    \n      return (\n        <div className=\"container incomplete-row\">\n            <div className=\"row\">\n                <div className=\"col-12 incomplete-row__text\">\n                    <h3>\n                    You have {props.count} tasks left.\n                    </h3>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default IncompleteRow;","import React from 'react';\n\nimport './CompleteRow.css';\n\n\nfunction CompleteRow(props) {\n    return (\n        <div className=\"container complete-row\">\n            <div className=\"row\">\n                <div className=\"col-12 complete-row__text\">\n                    <h3>\n                        Whoop! {props.count} tasks done!\n                    </h3>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default CompleteRow;","import React from 'react';\n\nimport pencilIcon from '../Icons/pencil-2.svg';\n\nimport './Header.css';\n\n\nfunction Header() {\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-1 col-md-2 header\">\n                    <img src={pencilIcon} alt=\"pencil logo\" className=\"logo-svg\" />\n                </div>\n                <div className=\"col-11 col-md-10 header\">\n                    <h1>TO-DO LIST</h1>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Header;","import React, { useState } from 'react';\nimport './App.css';\nimport TaskItem from './TaskItem/TaskItem';\nimport TaskInput from './TaskInput/TaskInput';\nimport IncompleteRow from './IncompleteRow/IncompleteRow';\nimport CompleteRow from './CompleteRow/CompleteRow';\nimport Header from './Header/Header'\nimport { v4 as uuidv4 } from 'uuid';\n\n\nfunction App() {\n\n  const [tasks, setTasks] = useState([\n    { text: \"Feed the cat\", completed: false, dueDate: \"2020-05-20\", id: uuidv4() },\n    { text: \"Go for a walk\", completed: false, dueDate: \"2020-06-10\", id: uuidv4() },\n    { text: \"Food shopping\", completed: true, dueDate: \"2020-05-24\", id: uuidv4() },\n    { text: \"Combine bootstrap with my react to do app\", completed: true, dueDate: \"2020-05-19\", id: uuidv4() },\n    { text: \"CSS styling\", completed: false, dueDate: \"2020-06-4\", id: uuidv4() }\n  ]);\n\n  const activeTasks = tasks.filter(task => !task.completed);\n\n  const completedTasks = tasks.filter(task => task.completed);\n\n  function deleteTask(id) {\n    const updatedTasks = tasks.filter(task => task.id !== id);\n    setTasks(updatedTasks);\n  }\n\n  function completeTask(id) {\n    const updatedTasks = tasks.map(task => {\n      if(task.id === id) {\n        task.completed = true;\n      }\n      return task;\n    })\n    setTasks(updatedTasks);\n  }\n\n  function addTask(text, dueDate) {\n    const newTask = {\n      text: text, \n      completed: false, \n      dueDate: dueDate, \n      id: uuidv4()\n    }\n    const updatedTasks = [ ...tasks, newTask ]\n    setTasks(updatedTasks);\n  }\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <TaskInput addTask={addTask} />\n      <IncompleteRow count={activeTasks.length} />\n      <ul className=\"task-list\">\n        {activeTasks.map(task => {\n          return <TaskItem\n            completeTask={completeTask}\n            deleteTask={deleteTask}\n            id={task.id}\n            key={task.id}\n            text={task.text}\n            completed={task.completed}\n            dueDate={task.dueDate} />\n        })}\n      </ul>\n      <CompleteRow count={completedTasks.length} />\n      <ul className=\"task-list\">\n        {completedTasks.map(task => {\n          return <TaskItem\n            completeTask={completeTask}\n            deleteTask={deleteTask}\n            id={task.id}\n            key={task.id}\n            text={task.text}\n            completed={task.completed}\n            dueDate={task.dueDate} />\n        })}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}