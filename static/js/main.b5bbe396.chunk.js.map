{"version":3,"sources":["Icons/pencil-2.svg","TaskItem/TaskItem.js","TaskInput/TaskInput.js","IncompleteRow/IncompleteRow.js","CompleteRow/CompleteRow.js","Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TaskItem","props","className","completed","text","dueDate","type","TaskInput","placeholder","IncompleteRow","count","CompleteRow","Header","src","pencilIcon","alt","App","useState","tasks","activeTasks","filter","task","completedTasks","length","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oHAAAA,EAAOC,QAAU,IAA0B,sC,uQCkC5BC,MA7Bf,SAAkBC,GACd,OACI,yBAAKC,UAAS,oBAAgBD,EAAME,UAAY,uBAAyB,cACrE,yBAAKD,UAAU,OACX,yBAAKA,UAAU,kCACX,uBAAGA,UAAU,mBACRD,EAAMG,OAGf,yBAAKF,UAAU,uCACX,uBAAGA,UAAU,mBAAb,QACUD,EAAMI,UAGpB,yBAAKH,UAAU,qCACTD,EAAME,WAAa,4BAAQG,KAAK,SAASJ,UAAU,0CACjD,0BAAMA,UAAU,kBAAhB,UAGR,yBAAKA,UAAU,oCACX,4BAAQI,KAAK,SAASJ,UAAU,2CAC5B,0BAAMA,UAAU,kBAAhB,e,MCNTK,MAff,WACI,OACI,yBAAKL,UAAU,wBACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,yCACf,2BAAOA,UAAU,eAAeI,KAAK,OAAOE,YAAY,mCAExD,yBAAKN,UAAU,sCACf,4BAAQI,KAAK,SAASJ,UAAU,0CAAhC,W,MCSDO,MAff,SAAuBR,GAEjB,OACE,yBAAKC,UAAU,4BACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,+BACX,wCACUD,EAAMS,MADhB,oB,MCMLC,MAdf,SAAqBV,GACjB,OACI,yBAAKC,UAAU,0BACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,6BACX,sCACYD,EAAMS,MADlB,oB,sBCYLE,MAff,WACI,OACI,yBAAKV,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,yBACX,yBAAKW,IAAKC,IAAYC,IAAI,cAAcb,UAAU,cAEtD,yBAAKA,UAAU,2BACX,8CCwBLc,MA9Bf,WAAgB,IAAD,EAEaC,mBAAS,CACjC,CAAEb,KAAM,eAAgBD,WAAW,EAAOE,QAAS,cACnD,CAAED,KAAM,gBAAiBD,WAAW,EAAOE,QAAS,cACpD,CAAED,KAAM,gBAAiBD,WAAW,EAAME,QAAS,cACnD,CAAED,KAAM,4CAA6CD,WAAW,EAAME,QAAS,cAC/E,CAAED,KAAM,cAAeD,WAAW,EAAOE,QAAS,eAPvC,mBAENa,EAFM,KAUPC,GAVO,KAUOD,EAAME,QAAO,SAAAC,GAAI,OAAKA,EAAKlB,cAEzCmB,EAAiBJ,EAAME,QAAO,SAAAC,GAAI,OAAIA,EAAKlB,aAEjD,OACE,yBAAKD,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAeQ,MAAOS,EAAYI,SAClC,wBAAIrB,UAAU,aACXiB,EAAYK,KAAI,SAAAH,GAAI,OAAI,kBAAC,EAAD,CAAUI,IAAKJ,EAAKjB,KAAMA,KAAMiB,EAAKjB,KAAMD,UAAWkB,EAAKlB,UAAWE,QAASgB,EAAKhB,cAE/G,kBAAC,EAAD,CAAaK,MAAOY,EAAeC,SACnC,wBAAIrB,UAAU,aACXoB,EAAeE,KAAI,SAAAH,GAAI,OAAI,kBAAC,EAAD,CAAUI,IAAKJ,EAAKjB,KAAMA,KAAMiB,EAAKjB,KAAMD,UAAWkB,EAAKlB,UAAWE,QAASgB,EAAKhB,gBCrBpGqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b5bbe396.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pencil-2.f436b4e9.svg\";","import React from 'react';\n\nimport './TaskItem.css';\n\n\nfunction TaskItem(props) {\n    return (\n        <div className={`container ${ props.completed ? \"task-item__completed\" : \"task-item\" }`}>\n            <div className=\"row\">\n                <div className=\"col-12 col-md-8 task-item__all\">\n                    <p className=\"task-item__text\">\n                        {props.text}\n                    </p>\n                </div>\n                <div className=\"col-12 col-md-2 task-item__date-all\">\n                    <p className=\"task-item__date\">\n                        Due: {props.dueDate}\n                    </p>\n                </div>\n                <div className=\"col-6 col-md-1 task-item__button\">\n                    {!props.completed && <button type=\"button\" className=\"btn btn-success task-item__done-button\">\n                        <span className=\"material-icons\">done</span>\n                    </button>}\n                </div>\n                <div className=\"col-6 col-md-1 task-item__button\">\n                    <button type=\"button\" className=\"btn btn-danger task-item__delete-button\">\n                        <span className=\"material-icons\">delete</span>\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default TaskItem;\n","import React from 'react';\n\nimport './TaskInput.css';\n\n\nfunction TaskInput() {\n    return (\n        <div className=\"container task-input\">\n            <div className=\"row\">\n                <div className=\"col-12 col-md-10 task-input__text-box\">\n                <input className=\"form-control\" type=\"text\" placeholder=\"Add something to your list...\"/>\n                </div>\n                <div className=\"col-12 col-md-2 task-input__button\">\n                <button type=\"button\" className=\"btn btn-success task-input__add-button\">Add</button>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default TaskInput;","import React from 'react';\n\nimport './IncompleteRow.css';\n\n\n\n\nfunction IncompleteRow(props) {\n    \n      return (\n        <div className=\"container incomplete-row\">\n            <div className=\"row\">\n                <div className=\"col-12 incomplete-row__text\">\n                    <h3>\n                    You have {props.count} tasks left.\n                    </h3>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default IncompleteRow;","import React from 'react';\n\nimport './CompleteRow.css';\n\n\nfunction CompleteRow(props) {\n    return (\n        <div className=\"container complete-row\">\n            <div className=\"row\">\n                <div className=\"col-12 complete-row__text\">\n                    <h3>\n                        Whoop! {props.count} tasks done!\n                    </h3>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default CompleteRow;","import React from 'react';\n\nimport pencilIcon from '../Icons/pencil-2.svg';\n\nimport './Header.css';\n\n\nfunction Header() {\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-1 col-md-2 header\">\n                    <img src={pencilIcon} alt=\"pencil logo\" className=\"logo-svg\" />\n                </div>\n                <div className=\"col-11 col-md-10 header\">\n                    <h1>TO-DO LIST</h1>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Header;","import React, { useState } from 'react';\nimport './App.css';\nimport TaskItem from './TaskItem/TaskItem';\nimport TaskInput from './TaskInput/TaskInput';\nimport IncompleteRow from './IncompleteRow/IncompleteRow';\nimport CompleteRow from './CompleteRow/CompleteRow';\nimport Header from './Header/Header'\n\n\nfunction App() {\n\n  const [tasks, setTasks] = useState([\n    { text: \"Feed the cat\", completed: false, dueDate: \"2020-05-20\" },\n    { text: \"Go for a walk\", completed: false, dueDate: \"2020-06-10\" },\n    { text: \"Food shopping\", completed: true, dueDate: \"2020-05-24\" },\n    { text: \"Combine bootstrap with my react to do app\", completed: true, dueDate: \"2020-05-19\" },\n    { text: \"CSS styling\", completed: false, dueDate: \"2020-06-4\" }\n  ]);\n\n  const activeTasks = tasks.filter(task => !task.completed);\n\n  const completedTasks = tasks.filter(task => task.completed);\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <TaskInput />\n      <IncompleteRow count={activeTasks.length} />\n      <ul className=\"task-list\">\n        {activeTasks.map(task => <TaskItem key={task.text} text={task.text} completed={task.completed} dueDate={task.dueDate} />)}\n      </ul>\n      <CompleteRow count={completedTasks.length} />\n      <ul className=\"task-list\">\n        {completedTasks.map(task => <TaskItem key={task.text} text={task.text} completed={task.completed} dueDate={task.dueDate} />)}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}